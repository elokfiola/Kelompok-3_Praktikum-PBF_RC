# -*- coding: utf-8 -*-
"""Data Imputer_Prak PBF Modul 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102lR4AECEpD_luKxUQoxX40bOm-CvOM7
"""

import csv
import math
from collections import Counter
from sklearn.metrics import mean_squared_error

def data_imputer(strategy='mean'):
    def impute(data):
        if strategy == 'mean':
            mean_val = sum(x for x in data if x is not None) / len([x for x in data if x is not None])
            return [x if x is not None else math.ceil(mean_val) for x in data]
        elif strategy == 'median':
            sorted_data = sorted(x for x in data if x is not None)
            median_val = sorted_data[len(sorted_data) // 2]
            return [x if x is not None else math.ceil(median_val) for x in data]
        elif strategy == 'mode':
            mode_val = Counter(x for x in data if x is not None).most_common(1)[0][0]
            return [x if x is not None else math.ceil(mode_val) for x in data]
        else:
            raise ValueError("Unsupported imputation strategy")

    return impute

def read_csv_file(filename):
    data = []
    with open(filename, 'r') as file:
        csv_reader = csv.reader(file)
        for row in csv_reader:
            data.extend(int(cell) if cell.strip().isdigit() else None for cell in row if cell.strip())
    return data

filename = input("Masukkan nama file (file.csv): ")
data = read_csv_file(filename)

# Contoh penggunaan closure
# Imputasi menggunakan mean
impute_mean = data_imputer('mean')
imputed_data_mean = impute_mean(data)

# Imputasi menggunakan median
impute_median = data_imputer('median')
imputed_data_median = impute_median(data)

# Imputasi menggunakan modus
impute_mode = data_imputer('mode')
imputed_data_mode = impute_mode(data)

# Proses pengolahan data setelah imputasi
start_index = next((i for i, x in enumerate(data) if x is not None), None)
imputed_length_mean = len(imputed_data_mean[start_index:])
imputed_length_median = len(imputed_data_median[start_index:])
imputed_length_mode = len(imputed_data_mode[start_index:])

# Hitung RMSE untuk setiap metode imputasi
rmse_mean = math.sqrt(mean_squared_error(imputed_data_mean, imputed_data_mean))
rmse_median = math.sqrt(mean_squared_error(imputed_data_mean, imputed_data_median))
rmse_mode = math.sqrt(mean_squared_error(imputed_data_mean, imputed_data_mode))

# Pilih hasil imputasi dengan RMSE terkecil sebagai hasil terbaik
hasil_imputasi_terbaik = ''
if rmse_mean <= rmse_median and rmse_mean <= rmse_mode:
    hasil_imputasi_terbaik = 'Mean'
    print("Panjang data:", imputed_length_mean)
    print("Hasil imputasi menggunakan mean:", imputed_data_mean[start_index:])
    print(f"Metode imputasi data terbaik menggunakan mean dengan RMSE: {rmse_mean}")
elif rmse_median <= rmse_mean and rmse_median <= rmse_mode:
    hasil_imputasi_terbaik = 'Median'
    print("Panjang data:", imputed_length_median)
    print("Hasil imputasi menggunakan median:", imputed_data_median[start_index:])
    print(f"Metode imputasi data terbaik menggunakan median dengan RMSE: {rmse_median}")
else:
    hasil_imputasi_terbaik = 'Modus'
    print("Panjang data:", imputed_length_mode)
    print("Hasil imputasi menggunakan modus:", imputed_data_mode[start_index:])
    print(f"Metode imputasi data terbaik menggunakan modus dengan RMSE: {rmse_mode}")